/*
 * Copyright (C) 2016-2020 David Alejandro Rubio Escares / Kodehawa
 *
 *  Mantaro is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * Mantaro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mantaro.  If not, see http://www.gnu.org/licenses/
 */

//Plugins
plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

archivesBaseName = 'MantaroAPI'
group 'kodehawa'
version '2.1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "net.kodehawa.mantaroapi.MantaroAPI"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

dependencies {
    compile 'com.sparkjava:spark-core:2.7.2'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'com.github.adamint:patreon-java:417322b'
    compile group: 'org.json', name: 'json', version: '20171018'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'

}

build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

task cleanDistTar(type: Delete) { delete files(distTar) }
distTar { classifier = "trash" }
distTar.finalizedBy cleanDistTar

task cleanDistZip(type: Delete) { delete files(distZip) }
distZip { classifier = "trash" }
distZip.finalizedBy cleanDistZip

task cleanUnshadedJar(type: Delete) { delete files(jar) }
jar { classifier = "trash" }
jar.finalizedBy cleanUnshadedJar

shadowJar {
    classifier = ""
}
